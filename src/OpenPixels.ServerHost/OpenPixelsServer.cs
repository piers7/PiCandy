using log4net;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OpenPixels.Server
{
    /// <summary>
    /// Acts as the central dispatcher/broker,
    /// ensuring that as commands are generated by the various <see cref="ICommandSource"/>s,
    /// they are passed to the relevant <see cref="IPixelRenderer"/>s
    /// </summary>
    public class OpenPixelsServer : IDisposable
    {
        IEnumerable<ICommandSource> _sources;
        IEnumerable<IPixelRenderer> _renderers;

        public OpenPixelsServer(
            IEnumerable<ICommandSource> sources,
            IEnumerable<IPixelRenderer> renderers,
            ILog logger
            )
        {
            _sources = sources;
            _renderers = renderers;

            // Hook up to all listeners
            foreach (var listener in _sources)
                listener.ExecuteCommand += DispatchCommand;
        }

        public IEnumerable<ICommandSource> Sources
        {
            get { return _sources; }
        }

        public IEnumerable<IPixelRenderer> Renderers
        {
            get { return _renderers; }
        }

        private void DispatchCommand(object sender, Action<IPixelRenderer> command)
        {
            foreach (var renderer in _renderers)
                command(renderer);
        }

        public void Dispose()
        {
            foreach (var listener in _sources)
                listener.ExecuteCommand -= DispatchCommand;
        }
    }
}
